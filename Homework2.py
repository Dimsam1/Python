# -*- coding: utf-8 -*-
"""
Created on Mon Apr 25 11:00:16 2022

@author: dimsa
"""

############################################################################################################
# 1. Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. 
# Использовать функцию type() для проверки типа. 
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
############################################################################################################

import random as rnd

#dir(rnd)
# Полностью на рандоме
FullList = []

ListInt = [rnd.randint(0,20) for e in range(8)]
print(ListInt)

ListFloat = [round(rnd.uniform(0,20), 5) for e in range(8)]
print(ListFloat)

ListString = [str(rnd.randint(0,20)) for e in range(8)]
print(ListString)

FullList.extend(ListInt)
FullList.extend(ListFloat)
FullList.extend(ListString)

print('Общий массив', FullList)

TypeCount = 0
while TypeCount < len(FullList):
    print(FullList[TypeCount], type(FullList[TypeCount]))
    TypeCount += 1
else: 
    print('Итого', TypeCount, 'элемента(ов)')
########################################################## или ###############################

# Руками все, включая модуль random и команду (мне было интересно посмотреть 
# на class команды, получается, что она выполняется и автозаполняет элемент листа, как лист [])

FullList1 = [-15, {1, 3, 4}, 14.2, ['world', 2, 5, 'hello'], 'False', True, (3,3,3,8), None, rnd, dir(rnd)]

for i in FullList1:
    print(type(i))

print('или:')    
    
for a in range(len(FullList1)):
    print(type(FullList1[a]))    
    
##################################################### Конец задания 1 ############################################


############################################################################################################
#2. Для списка реализовать обмен значений соседних элементов, т.е. 
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
# При нечетном количестве элементов последний сохранить на своем месте. 
# Для заполнения списка элементов необходимо использовать функцию input().
############################################################################################################

# Заполняем руками
# В интеренете нашел простую замену переменных a,b = b,a , поэтому не создаем новый лист, а меняем в текущем.
# нечетный элемент остается тот же, так как меняем парами по 2 элемента
new_list = [x for x in input('Добавьте элементы списка (разделитель-пробел(!):').split()]
print(new_list)

i = 0

while i < (len(new_list) - 1):
    new_list[i], new_list[i + 1] = new_list[i + 1], new_list[i]
    i += 2
else:
    print(new_list)
    
# Или через создание нового листа, в котором заполнение происходит в обратном 
# порядке, опять же нечетный элемент останется отдельно   

#old_list = [x for x in input('Добавьте элементы списка (разделитель-пробел(!):').split()]
old_list = [1, 2, 3, 4, 5, 6, 7, 8, 'tr', 're', 'last']
print(old_list)

i = 0
new_list = []

if len(old_list)%2 == 0:
    while i < ((len(old_list)//2)*2):
    
       new_list.append(old_list[i + 1])
    
       new_list.append(old_list[i])
    
       i += 2
else:    
    while i < ((len(old_list)//2)*2):
        new_list.append(old_list[i + 1])
     
        new_list.append(old_list[i])
     
        i += 2
    new_list.append(old_list[i])
print(new_list)
        
    


######################################################## Конец задания 2 ##################################

###########################################################################################################
# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
# Напишите решения через list и через dict.
###########################################################################################################

monNr = int(input('Введите номер месяца: '))

year_list = ['Зима' for x in range(2)] + ['Весна' for x in range(2,5)] + ['Лето' for x in range(5,8)] + ['Осень' for x in range(8,11)] + ['Зима' for x in range(11,12)]
print('Ваш месяц относится к поре года:', (year_list[(monNr - 1)]))

# или создание через append

monNr = int(input('Введите номер месяца: '))

year_list.append(['Зима' for x in range(2)])
year_list.append(['Весна' for x in range(2,5)])
year_list.append(['Лето' for x in range(5,8)])
year_list.append(['Осень' for x in range(8,11)])
year_list.append(['Зима' for x in range(11,12)])

print('Ваш месяц относится к поре года:', (year_list[(monNr - 1)]))


# dict
monthNr = int(input('Введите номер месяца: '))
year = dict([(1, 'Зима'), (2, 'Зима'), (3, 'Весна'), (4, 'Весна'), (5, 'Весна'), (6, 'Лето'), (7, 'Лето'), (8, 'Лето'), (9, 'Осень'), (10, 'Осень'), (11, 'Осень'), (12, 'Зима')])
print("Ваш месяц относится к поре года:", year[monthNr])


######################################################## Конец задания 3 ##################################

############################################################################################################
#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
#Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
#Если в слово длинное, выводить только первые 10 букв в слове.
############################################################################################################


#words = [x for x in input('Напишите несколько слов, разделенных пробелами:').split()]
words = ['Напишитеrrrrr', 'несколькоооооо', 'слов', 'раааааазделенных', 'пробеламиииииии']
Nom = 0
Leng = 10

while Nom < len(words):
    
    print(f' №{Nom + 1}:', words[Nom][:Leng])
    
    Nom += 1

# Михаил, можно еще прогнать через модуль enumerate,я видел его в примере, но
# я его пока не знаю. Если это для самостоятельного, то изучу, напишите, пож-та, в примечании к ДЗ.

######################################################## Конец задания 4 ##################################

############################################################################################################
# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
# У пользователя необходимо запрашивать новый элемент рейтинга. 
# Если в рейтинге существуют элементы с одинаковыми значениями, 
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
############################################################################################################

import random as rnd
#Rate_inp = [5, 6, 8, 2, 9, 0]
Rate_inp = [rnd.randint(0,10) for t in range(7)]
Rate_inp.sort(reverse=True)
print(Rate_inp)
inp = int(input('Введите доп элемент рейтинга: '))
# Михаил, проверьте, пож-та, кусок ниже, не могу понять, почему цикл делается
# один и добавляет только элемент с индексом 2
# Можно ли таким циклом делать запись в лист?
n = 0
#while n < (len(Rate_inp)):
#    if inp == int(Rate_inp[n]):
#        n += 1
#        Rate_inp.insert(n, inp)
#    else:
#        n += 1
#    Rate_inp.insert((n + 1), inp)  
#    break   
#print(Rate_inp)
if n <= len(Rate_inp):
    if inp in Rate_inp:
        n = Rate_inp.index(inp)
            #d = Rate_inp.count(inp)
        Rate_inp.insert(n + 1, inp)
        n += 1
    else:
        Rate_inp.append(inp)
print(Rate_inp)
# Добполнительно фиксирую новый символ в невозрастающий лист
Rate_inp.sort(reverse=True)
print('Итоговый убывающий лист',Rate_inp)

######################################################## Конец задания 5 ##################################

############################################################################################################
# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — 
# номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, 
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }
############################################################################################################


#отправлю в след задании