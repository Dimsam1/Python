############################ Задание 1#########################################

# 1.Реализовать скрипт, в котором должна быть предусмотрена функция расчёта
# заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

def zp():
    vyr = int(input("Введите количество отработанных часов: "))
    stav = int(input("Введите ставку в час: "))
    prem = int(input("Введите размер премии: "))
    zarp = vyr * stav + prem
    print("Зарплата составляет: ", zarp)
    return zarp

    zp()

############################ Задание 2#########################################

# 2.Представлен список чисел. Необходимо вывести элементы исходного списка, 
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
# Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

import random as rnd
newList = []
myList = [rnd.randint(0,50) for x in range(15)]
print('Исходный список: ', myList)
i = 0
while i < (len(myList) - 1):
    if myList[i] < myList[i + 1]:
        newList.append(myList[i + 1])
        i += 1
    else:
        i += 1
print('Конечный список', newList)

##################### или 

import random as rnd
myList = [rnd.randint(0,50) for x in range(15)]
print('Исходный список: ', myList)
newList = [myList[i + 1] for i in range(len(myList) - 1) if myList[i + 1] > myList[i] ]
   
print('Конечный список', newList)
      
###################### или
def gen():
        import random as rnd
        myList = [rnd.randint(0,50) for x in range(15)]
        return(myList)
a = gen()
print(a)
newList = []
i = 1
while i < (len(a) - 1):
    if a[i - 1] < a[i]:
        newList.append(a[i])
        i += 1
    else:
        i += 1
print('Конечный список', newList)

###############################################################################
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите 
# задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

def gen1():
        return([x for x in range(20,241)])
        
num = gen1()

res = [el for el in num if el % 21 == 0] + [el for el in num if el % 20 == 0]

res.sort()

print(res)


################################ подсмотрел, оставлю для опыта

res1 = [*range(20,241,20)] + [*range(21,241,21)]
res1.sort()
print(res1)


#######################################Задание 4###############################

# Представлен список чисел. Определите элементы списка, не имеющие повторений. 
# Сформируйте итоговый массив чисел, соответствующих требованию. 
# Элементы выведите в порядке их следования в исходном списке. 
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

def gen2():
        import random as rnd
        myList = [rnd.randint(0,25) for x in range(20)]
        return myList
 
s = gen2()
print(s)
res3 = [el for el in s if s.count(el) == 1]
print('Уникальные элементы: ', res3)

#или

res4 = [el for nom,el in enumerate(s) if el not in s[nom+1:] and el not in s[:nom]]
print('Уникальные элементы: ', res4)


###########################################Задание 5###########################

# Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти чётные числа от 100 до 1000 (включая границы). 
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


start_list = [x for x in range(100, 1001) if x % 2 == 0]

from functools import reduce
def reduce_sample(a, b):
    return a * b

#print(start_list[0], start_list[450])
print(reduce(reduce_sample, start_list))

################################

#Оставлю для примера по lambda
#from functools import reduce
#numbers = [i for i in range(99, 1002) if i % 2 == 0]
#proizvedeni_all = reduce(lambda x,y: x * y, numbers)
 
#print (proizvedeni_all)

######################################Задание 6№№№#############################
# 6.	Реализовать два небольших скрипта:
# ●	итератор, генерирующий целые числа, начиная с указанного;
# ●	итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. 
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
# Предусмотрите условие его завершения. 
# Например, в первом задании выводим целые числа, начиная с 3. 
# При достижении числа 10 — завершаем цикл. 
# Вторым пунктом необходимо предусмотреть условие, при котором повторение 
# элементов списка прекратится.

#import itertools
from itertools import count, cycle
n1 = int(input('Введите начальное значение: '))
n2 = int(input('Введите конечное значение: '))

for i in count(n1):
    if i > n2:
        break
    else:
        print(i)

#while n1 < n2: 
#    print(n1)
#    n1+= 1
#else: print(n1)

s = []
dl = ('Для повтора')
en = int(len(dl) - 1)
st = 0
for y in cycle(dl):
    if st == en:
        print(y)
        s.append(y)
        print(s)
        break
    s.append(y)
    print(y, end = '')
    st += 1

    
################################################################################################################################
# 7.	Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. 
# Функция вызывается следующим образом: for el in fact(n). 
# Она отвечает за получение факториала числа. 
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. 
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def fact(n):
    for x in range(1, (n + 1)):
        yield factorial(x)

n = int(input('Введите число, факториал которого ищем: '))
for el in fact(n):
    print(el)


########################### или просто цикл##############################


from math import factorial
    
m = int(input('Введите число, факториал которого ищем: '))
for i in range(1, m + 1):
    print (factorial(i))
